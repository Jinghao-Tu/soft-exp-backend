@startuml

'!theme plain
top to bottom direction
skinparam linetype ortho

class Comment {
  - user: User
  - post: Post
  - id: Long
  - avatar: String
  - content: String
  + getPost(): Post
  + getId(): Long
  + toString(): String
  + hashCode(): int
  + getUser(): User
  + getContent(): String
  # canEqual(Object): boolean
  + getAvatar(): String
  + setId(Long): void
  + equals(Object): boolean
  + setUser(User): void
  + setPost(Post): void
  + setContent(String): void
  + setAvatar(String): void
  + Comment(): 
}
class CommentController {
  - userService: UserService
  - commentService: CommentService
  - postService: PostService
  - logger: Logger
  - objectMapper: ObjectMapper
  + deleteComment(Long): ResponseEntity<Void>
  + getCommentsByPost(Long): ResponseEntity<List<GetResponse>>
  + addComment(AddRequest): ResponseEntity<Comment>
  + getAllComments(): ResponseEntity<List<GetResponse>>
  + updateComment(Long, Comment): ResponseEntity<Comment>
  + CommentController(CommentService, PostService, UserService): 
}
interface CommentRepository << interface >> {
  + findByPost(Post): List<Comment>
}
class CommentService {
  - commentRepository: CommentRepository
  + getAllComments(): List<Comment>
  + deleteComment(Comment): void
  + saveComment(Comment): void
  + getCommentsByPost(Post): List<Comment>
  + getCommentById(Long): Comment
  + CommentService(CommentRepository): 
}

class http.GetResponse {
    - Long id
    - Long postId
    - String content
    - String username
    - String avatar
    + getter()
    + setter()
}
class http.AddRequest {
    - Long postId
    - String avatar
    - String username
    - String content
    + getter()
    + setter()
}

CommentController .> http
'CommentController  -[#595959,dashed]->  Comment
CommentController "1" *-[#595959,plain]-> "1" CommentService
CommentController "1" *-[#595959,plain]-> "1" UserService
CommentService    "1" *-[#595959,plain]-> "1" CommentRepository
CommentService ..> Comment
CommentRepository ..> Comment
@enduml
